{"version":3,"sources":["edit.js"],"names":["$content","$","trumbowyg","lang","btnsDef","upload","ico","btns","serverPath","fileFieldName","urlPropertyName","getContent","$el","data","$ed","html","api","action","editForm","payload","tags","split","content","mentions","undefined","submitted","response","ok","url","location","href","$button","$progress","$fileBox","$form","tmpl","$noFiles","initialAPI","get","tagator","autocomplete","map","item","name","showAllOptionsOnFocus","nicknames","allowAutocompleteOnly"],"mappings":";;;;;;;;;;;;;AAMA,QAAIA,WAAWC,EAAE,UAAF,EAAcC,SAAd,CAAwB;AACnCC,+BADmC;AAEnCC,iBAAS;AACLC,oBAAQ;AACJC,qBAAK;AADD;AADH,SAF0B;AAOnCC,cAAM,CACF,CAAC,MAAD,EAAS,MAAT,CADE,EAEF,CAAC,YAAD,CAFE,EAGF,eAHE,EAIF,CAAC,MAAD,CAJE,EAKF,CAAC,QAAD,CALE,EAMF,gBANE,EAOF,cAPE,EAQF,CAAC,WAAD,EAAc,WAAd,CARE,EASF,CAAC,cAAD,CATE,EAUF,CAAC,gBAAD,CAVE,EAWF,CAAC,YAAD,CAXE,CAP6B;AAoBnC,mBAAW;AACPF,oBAAQ;AACJG,4BAAY,eADR;AAEJC,+BAAe,OAFX;AAGJC,iCAAiB;AAHb;AADD;AApBwB,KAAxB,CAAf;;AA6BA,QAAMC,aAAa,SAAbA,UAAa;AAAA,eAAOC,IAAIC,IAAJ,CAAS,WAAT,EAAsBC,GAAtB,CAA0BC,IAA1B,EAAP;AAAA,KAAnB;AACA,QAAMC,MAAM,yEAA4C,gBAAxD;AACA,QAAMC,SAAS,wBAAY,OAAZ,GAAsB,MAArC;;AAEA,QAAIC,WAAW,mBAAS,YAAT,EAAuBF,GAAvB,EAA4BC,MAA5B,EACVE,OADU,CACF;AAAA,eACLN,KAAKO,IAAL,GAAY,CAACP,KAAKO,IAAN,GAAa,EAAb,GAAkBP,KAAKO,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CADzB;AAAA,KADE,EAGTF,OAHS,CAGD;AAAA,eACNN,KAAKS,OAAL,GAAeX,WAAWX,QAAX,CADT;AAAA,KAHC,EAKTmB,OALS,CAKD;AAAA,eACNN,KAAKU,QAAL,KAAkBC,SAAlB,KAAgCX,KAAKU,QAAL,GAAgBV,KAAKU,QAAL,CAAcF,KAAd,CAAoB,GAApB,CAAhD,CADM;AAAA,KALC,EAOTI,SAPS,CAOC;AAAA,eACRC,SAASC,EAAT,CAAY;AAAA,gBAAGC,GAAH,QAAGA,GAAH;AAAA,mBAAaC,SAASC,IAAT,GAAgBF,GAA7B;AAAA,SAAZ,CADQ;AAAA,KAPD,CAAf;;AAWA;;AAIA,4BAAW;AACPG,iBAAS,cADF;AAEPC,mBAAW,yBAFJ;AAGPC,kBAAU,WAHH;AAIPC,eAAO,YAJA;AAKPC,cAAM,WALC;AAMPC,kBAAU,WANH;AAOPC,oBAAY,qFAAuDb;AAP5D,KAAX;;AAUA;;AAEA,uBAAQ,YAAR,EAAsBc,GAAtB,GACKX,EADL,CACQ,gBAAQ;AACR1B,UAAE,OAAF,EAAWsC,OAAX,CAAmB;AACfC,0BAAcpB,KAAKqB,GAAL,CAAS;AAAA,uBAAQC,KAAKC,IAAb;AAAA,aAAT,CADC;AAEfC,mCAAuB;AAFR,SAAnB;AAIH,KANL;;AAQA,QAAI,sBAAJ,EAAgB;AACZ,2BAAQ,sBAAR,EAAgCN,GAAhC,GACKX,EADL,CACQ,qBAAa;AACb1B,cAAE,WAAF,EAAesC,OAAf,CAAuB;AACnBC,8BAAcK,SADK;AAEnBD,uCAAuB,IAFJ;AAGnBE,uCAAuB;AAHJ,aAAvB;AAKH,SAPL;AAQH","file":"../../articles/edit.js","sourcesContent":["import { locale } from 'trumbowyg'\nimport Form from 'util/form'\nimport { articleId } from 'page-config'\nimport 'tagator'\nimport API from 'util/rest'\n\nlet $content = $('#content').trumbowyg({\n    lang: locale,\n    btnsDef: {\n        upload: {\n            ico: 'insertImage'\n        }\n    },\n    btns: [\n        ['undo', 'redo'],\n        ['formatting'],\n        'btnGrp-design',\n        ['link'],\n        ['upload'],\n        'btnGrp-justify',\n        'btnGrp-lists',\n        ['foreColor', 'backColor'],\n        ['preformatted'],\n        ['horizontalRule'],\n        ['fullscreen']\n    ],\n    'plugins': {\n        upload: {\n            serverPath: '/files/image/',\n            fileFieldName: 'image',\n            urlPropertyName: 'url'\n        }\n    }\n})\n\nconst getContent = $el => $el.data('trumbowyg').$ed.html()\nconst api = articleId ? `/api/articles/${articleId}/` : '/api/articles/'\nconst action = articleId ? 'patch' : 'post'\n\nlet editForm = new Form('#edit-form', api, action)\n    .payload(data =>\n        data.tags = !data.tags ? [] : data.tags.split(',')\n    ).payload(data =>\n        data.content = getContent($content)\n    ).payload(data =>\n        data.mentions !== undefined && (data.mentions = data.mentions.split(','))\n    ).submitted(response =>\n        response.ok(({ url }) => location.href = url)\n    )\n\n// File Uploads\n\nimport { Upload } from 'util/attachments'\n\nnew Upload({\n    $button: '#attachments',\n    $progress: '.progress .progress-bar',\n    $fileBox: '#file-box',\n    $form: '#edit-form',\n    tmpl: 'file-item',\n    $noFiles: '.no-files',\n    initialAPI: articleId ? `/api/articles/${articleId}/attachments/`: undefined\n})\n\n// Tagify\n\nnew API('/api/tags/').get()\n    .ok(tags => {\n        $('#tags').tagator({\n            autocomplete: tags.map(item => item.name),\n            showAllOptionsOnFocus: true\n        })\n    })\n\nif (!articleId) {\n    new API('/api/user_nicknames/').get()\n        .ok(nicknames => {\n            $('#mentions').tagator({\n                autocomplete: nicknames,\n                showAllOptionsOnFocus: true,\n                allowAutocompleteOnly: true\n            })\n        })\n}\n"]}