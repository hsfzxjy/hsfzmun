{"version":3,"sources":["timeline.js"],"names":["startReal","Date","start_real","valueOf","startFake","start_fake","periods","map","item","duration","getFakeTime","fakeDuration","i","period","length","speed","getTime","$timeDisplay","$","timer","lastTime","formatDate","date","toISOString","split","replace","timerCallback","fakeTime","fadeOut","clearInterval","fadeIn","find","html","click","animate","width","complete","toggleIcon"],"mappings":";;;;;;;;;;;AAIA,QAAMA,YAAY,IAAIC,IAAJ,CAAS,yBAAOC,UAAhB,EAA4BC,OAA5B,EAAlB;AAAA,QAAyDC,YAAY,IAAIH,IAAJ,CAAS,yBAAOI,UAAhB,CAArE;;AAEA,QAAMC,UAAU,yBAAOA,OAAP,CAAeC,GAAf,CAAmB,gBAAQ;AACvCC,aAAKC,QAAL,IAAiB,IAAjB;AACA,eAAOD,IAAP;AACH,KAHe,CAAhB;;AAKA,aAASE,WAAT,GAAwB;AACpB,YAAID,WAAa,IAAIR,IAAJ,EAAD,CAAaE,OAAb,KAAyBH,SAAzC;AAAA,YAAqDW,eAAe,CAApE;;AAEA,YAAIF,WAAW,CAAf,EAAkB,OAAO,WAAP;;AAElB,aAAK,IAAIG,IAAI,CAAR,EAAWC,MAAhB,EAAwBJ,WAAW,CAAX,IAAgBG,IAAIN,QAAQQ,MAApD,EAA4D,EAAEF,CAA9D,EAAiE;AAC7DC,qBAASP,QAAQM,CAAR,CAAT;AACA,gBAAIH,YAAYI,OAAOJ,QAAvB,EAAiC;AAC7BA,4BAAYI,OAAOJ,QAAnB;AACAE,gCAAgBE,OAAOJ,QAAP,GAAkBI,OAAOE,KAAzC;AACH,aAHD,MAGO;AACHJ,gCAAgBF,WAAWI,OAAOE,KAAlC;AACAN,2BAAW,CAAX;AACH;AACJ;;AAED,eAAQA,WAAW,CAAZ,GAAiB,KAAjB,GAAyB,IAAIR,IAAJ,CAASG,UAAUY,OAAV,KAAsBL,YAA/B,CAAhC;AACH;;AAED,QAAMM,eAAeC,EAAE,WAAF,CAArB;AACA,QAAIC,cAAJ;AAAA,QAAWC,WAAW,WAAtB;;AAEA,aAASC,UAAT,CAAqBC,IAArB,EAA2B;AACvB,eAAOA,KAAKC,WAAL,GAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiCC,OAAjC,CAAyC,GAAzC,EAA8C,GAA9C,CAAP;AACH;;AAED,aAASC,aAAT,GAA0B;AACtB,YAAIC,WAAWjB,aAAf;;AAEA,gBAAQiB,QAAR;AACI,iBAAK,WAAL;AACI;AACJ,iBAAK,KAAL;AACIV,6BAAaW,OAAb,CAAqB,IAArB;AACAC,8BAAcV,KAAd;AACA;AACJ;AACI,oBAAIC,aAAa,WAAjB,EAA8BH,aAAaa,MAAb;AAC9Bb,6BAAac,IAAb,CAAkB,MAAlB,EAA0BC,IAA1B,CAA+BX,WAAWM,QAAX,CAA/B;AATR;;AAYAP,mBAAWO,QAAX;AACH;;AAED;;AAEA;;AAEAV,iBAAagB,KAAb,CAAmB,YAAM;AACrBhB,qBAAac,IAAb,CAAkB,MAAlB,EAA0BG,OAA1B,CAAkC;AAC9BC,mBAAO;AADuB,SAAlC,EAEG;AACC1B,sBAAU,MADX;AAEC2B,sBAAW;AAAA,uBAAMnB,aAAac,IAAb,CAAkB,GAAlB,EAAuBM,UAAvB,EAAN;AAAA;AAFZ,SAFH;AAMH,KAPD","file":"../timeline.js","sourcesContent":["import config from 'timeline-config'\nimport 'jquery'\nimport 'util/common'\n\nconst startReal = new Date(config.start_real).valueOf(), startFake = new Date(config.start_fake)\n\nconst periods = config.periods.map(item => {\n    item.duration *= 1000\n    return item\n})\n\nfunction getFakeTime () {\n    let duration = ((new Date()).valueOf() - startReal), fakeDuration = 0\n\n    if (duration < 0) return 'not-start'\n\n    for (let i = 0, period; duration > 0 && i < periods.length; ++i) {\n        period = periods[i]\n        if (duration >= period.duration) {\n            duration -= period.duration\n            fakeDuration += period.duration * period.speed\n        } else {\n            fakeDuration += duration * period.speed\n            duration = 0\n        }\n    }\n\n    return (duration > 0) ? 'end' : new Date(startFake.getTime() + fakeDuration)\n}\n\nconst $timeDisplay = $('.timeline')\nlet timer, lastTime = 'not-start'\n\nfunction formatDate (date) {\n    return date.toISOString().split('.')[0].replace('T', ' ')\n}\n\nfunction timerCallback () {\n    let fakeTime = getFakeTime()\n\n    switch (fakeTime) {\n        case 'not-start':\n            break\n        case 'end':\n            $timeDisplay.fadeOut(1000)\n            clearInterval(timer)\n            break\n        default:\n            if (lastTime === 'not-start') $timeDisplay.fadeIn()\n            $timeDisplay.find('span').html(formatDate(fakeTime))\n    }\n\n    lastTime = fakeTime\n}\n\n//timer = setInterval(timerCallback, 100)\n\n// Animation\n\n$timeDisplay.click(() => {\n    $timeDisplay.find('span').animate({\n        width: 'toggle'\n    }, {\n        duration: 'slow',\n        complete: (() => $timeDisplay.find('i').toggleIcon())\n    })\n})\n"]}